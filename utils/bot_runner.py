import re
import sys
import logging
import telebot
from openai import OpenAI
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from utils.database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')
api_key_gpt = "sk-4BrpT6qFsQ8mOwZ5qdJ4tpEScuTthzBtAOcyX5bvrZUUnu9nGFhGTqItkhrX5QfNB0nPXdRAaFA8igdBKBaclA"
db = Database()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if len(sys.argv) != 3:
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bot_runner.py <token> <user_id>")
    sys.exit(1)

TOKEN = sys.argv[1]
USER_ID = int(sys.argv[2])

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç /start
last_start_messages = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message: Message):
    chat_id = str(message.chat.id)
    user_id = USER_ID

    # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start
    if chat_id in last_start_messages and last_start_messages[chat_id]["active"]:
        try:
            bot.delete_message(chat_id, last_start_messages[chat_id]["message_id"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start: {e}")

    logging.info(f"/start –æ—Ç chat_id={chat_id} ‚Üí user_id={user_id}")

    if not user_id:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    try:
        subscribers = db.get_subscribers_by_user(user_id)
        is_subscribed = any(str(sub.telegram_chat_id) == chat_id for sub in subscribers)

        if is_subscribed:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe"))
            sent = bot.send_message(chat_id, "üîî –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="subscribe_yes"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="subscribe_no")
            )
            sent = bot.send_message(chat_id, "üì© –ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É?\n–£–∑–Ω–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã /help", reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        last_start_messages[chat_id] = {"message_id": sent.message_id, "active": True}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data in ["subscribe_yes", "subscribe_no", "unsubscribe"])
def handle_subscription_decision(call: CallbackQuery):
    chat_id = str(call.message.chat.id)
    user_id = USER_ID
    data = call.data

    logging.info(f"Callback –æ—Ç chat_id={chat_id}, data={data}")

    try:
        subscribers = db.get_subscribers_by_user(user_id)
        is_subscribed = any(str(sub.telegram_chat_id) == chat_id for sub in subscribers)

        if data == "subscribe_yes":
            if is_subscribed:
                bot.edit_message_text("üîî –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.",
                                      chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)
                logging.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: user_id={user_id}, chat_id={chat_id}")
            else:
                db.insert_subscriber(user_id=user_id, chat_id=chat_id)
                bot.edit_message_text("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!",
                                      chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)
                logging.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω: user_id={user_id}, chat_id={chat_id}")

        elif data == "subscribe_no":
            bot.edit_message_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id)
            logging.info(f"üö´ –û—Ç–∫–∞–∑ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏: chat_id={chat_id}")

        elif data == "unsubscribe":
            if not is_subscribed:
                bot.edit_message_text("‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.",
                                      chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)
                logging.info(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: chat_id={chat_id}")
            else:
                db.remove_subscriber(user_id=user_id, chat_id=chat_id)
                bot.edit_message_text("üóëÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.",
                                      chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)
                logging.info(f"‚ùå –û—Ç–ø–∏—Å–∞–Ω: user_id={user_id}, chat_id={chat_id}")

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if chat_id in last_start_messages:
            last_start_messages[chat_id]["active"] = False

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        bot.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id)

# GPT
@bot.message_handler(commands=['ask'])
def ask_chatgpt(message: Message):
    user_prompt = message.text.replace('/ask', '').strip()

    if not user_prompt:
        bot.reply_to(message, "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask.")
        return

    try:
        client = OpenAI(
            base_url="https://api.langdock.com/openai/eu/v1",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∞–¥—Ä–µ—Å
            api_key=api_key_gpt
        )

        response = client.chat.completions.create(
            model="gpt-4o-mini",  # –∏–ª–∏ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            messages=[
                {"role": "user", "content": user_prompt}
            ]
        )

        reply_text = response.choices[0].message.content.strip()
        bot.reply_to(message, reply_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(func=lambda msg: msg.text and re.search(r'\b(–ø—Ä–∏–≤–µ—Ç|hello)\b', msg.text.lower()))
def greet_handler(message: Message):
    chat_id = message.chat.id
    try:
        bot.send_message(
            chat_id,
            "–ü—Ä–∏–≤–µ—Ç! üëã –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, –Ω–∞–ø–∏—à–∏ /start üì¨. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ç Chat-GPT –Ω–∞–ø–∏—à–∏ /ask"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

# –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
@bot.message_handler(func=lambda msg: msg.text and not msg.text.startswith('/') and not re.search(r'\b(–ø—Ä–∏–≤–µ—Ç|hello)\b', msg.text.lower()))
def unknown_text_handler(message: Message):
    chat_id = message.chat.id
    try:
        bot.send_message(
            chat_id,
            "ü§ñ –Ø —Ç–µ–±—è –ø–æ–Ω—è–ª, –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å.\n–ù–∞–ø–∏—à–∏ <b>/help</b>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def help_command(message: Message):
    bot.send_message(message.chat.id, "ü§ñ –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ü–æ–¥–ø–∏—Å–∫–∞ / –æ—Ç–ø–∏—Å–∫–∞\n/ask ‚Äî –°–ø—Ä–æ—Å–∏—Ç—å Chat-GPT\n/help ‚Äî –ü–æ–º–æ—â—å")

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å token={TOKEN[:5]}..., user_id={USER_ID}")
    try:
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
